OpenStack y OpenVswitch en modo VLAN con redes tipo "provider" e interfaces en modo trunk

Escenario:

Interfaz eth1 en modo trunk pasando tráfico de vlans.
Primera VLAN asignada al puerto troncal: vlan10 (tag=10)
De lado de la malla de switches, el puerto asignado a la interfaz eth1 debe estar en modo troncal (no modo acceso) pasando tráfico de VLAN's.

Procedimiento:

1.- Asegurarse que existe el bridge de integración. En caso contrario, crearlo con el comando:

ovs-vsctl add-br br-int

2.- Creación del bridge para eth1 y creación del puerto e interfaz de vlan:

ovs-vsctl add-br br-eth1
ovs-vsctl add-port br-eth1 eth1

Los dos pasos anteriores crean el único bridge "br-eth1" y lo asocian al puerto troncal "eth1". 

ovs-vsctl add-port br-eth1 eth1-10 tag=10 -- set interface eth1-10 type=internal

Este paso es el que efectivamente hace el puente entre los paquetes marcados (tagged) y el mundo de redes de OpenStack. Este comando hay que ejecutarlo por cada vlan asignada al puerto eth1 y que vaya a ser utilizada por OpenStack (neutron).

ovs-vsctl add-port br-eth1 eth1-VLAN_ID tag=VLAN_ID -- set interfaces eth1-VLAN_ID type= internal

Esto para todas als VLAN_ID asignadas a la nube.

3.- Modificación del archivo de interfaces.

En el servidor (asumiendo ubuntu o debian), se incluyen las interfaces y puentes de la siguiente manera:

Archivo /etc/network/interfaces:

auto eth1
iface eth1 inet manual
pre-up /sbin/modprobe 8021q
up ifconfig $IFACE  up
up ip link $IFACE promisc on
down ifconfig $IFACE down

# Integration bridge
auto br-int
iface br-int inet manual
up ifconfig $IFACE 0.0.0.0 up
up ip link set $IFACE promisc on
up echo 1 >/proc/sys/net/ipv6/conf/$IFACE/disable_ipv6
down ip link set $IFACE promisc off
down ifconfig $IFACE down
#
# Main Bridge
auto br-eth1
iface br-eth1 inet manual
pre-up /sbin/ifconfig eth1 up
up ifconfig $IFACE  up
up ip link $IFACE promisc on
up echo 1 >/proc/sys/net/ipv6/conf/$IFACE/disable_ipv6
down ip link set $IFACE promisc off
down ifconfig $IFACE down

auto eth1-10
iface eth1-10 inet static
address 172.16.10.1
netmask 255.255.255.0
broadcast 172.16.10.255

Si se trata de un RHEL/CENTOS/SL se crean las interfaces como archivos independientes en el directorio /etc/sysconfig/network-scripts. Ejemplo:

/etc/sysconfig/network-scripts/ifcfg-br-int:

DEVICE=br-int
ONBOOT=yes
BOOTPROTO=none
DEVICETYPE=ovs
TYPE=OVSBridge

/etc/sysconfig/network-scripts/ifcfg-eth1:

DEVICE=eth1
TYPE=OVSPort
DEVICETYPE=ovs
OVS_BRIDGE=br-eth1
ONBOOT=yes
BOOTPROTO=none

/etc/sysconfig/network-scripts/ifcfg-br-eth1:

DEVICE=br-eth1
ONBOOT=yes
BOOTPROTO=none
DEVICETYPE=ovs
TYPE=OVSBridge

/etc/sysconfig/network-scripts/ifcfg-eth1-10

VLAN=yes
VLAN_NAME_TYPE=VLAN_PLUS_VID_NO_PAD
PHYSDEV=eth1
DEVICE=eth1-10
BOOTPROTO=static
ONBOOT=yes
IPADDR=172.16.10.1
NETMASK=255.255.255.0



4.- Cambios en neutron:

En neutron, se procede a crear la red con el siguiente comando:

neutron net-create opennet --shared --provider:network_type vlan --provider:physical_network opennet --provider:segmentation_id 10 --router:external=true

El "segmentation_id" debe contener el TAG de la VLAN.

En la configuración del plugin ML2 en neutron, se debe hacer la siguiente configuración:

Archivo /etc/neutron/plugins/ml2/ml2_conf.ini

[ml2]
type_drivers = vlan
mechanism_drivers = openvswitch,l2population
tenant_network_types = vlan

[ml2_type_vlan]
network_vlan_ranges = opennet:10:100

[ovs]
enable_tunneling = False
network_vlan_ranges = opennet:10:100
bridge_mappings = opennet:br-eth1


El parámetro "network_vlan_ranges" incluye la o las redes (y sus posibles rangos de vlan's) que se van a usar. El nombre usado aquí (opennet) fue el mismo usado como "provider:physical_network" en el comando de creación de la red usado anteriormente (neutron net-create).

Finalmente, y lo mas recomendable para probar que todo funciona correctamente, se reinicia el nodo completo.

Para cada nueva vlan asignada, debe crearse en openvswitch el respectivo puerto con el comando:

ovs-vsctl add-port br-eth1 eth1-VLAN_ID tag=VLAN_ID -- set interfaces eth1-VLAN_ID type= internal

Y de igual forma, se crea la red de neutron siempre colocándola contra el mismo "provider:physical_network". Ejemplo:

neutron net-create NUEVA_RED --shared --provider:network_type vlan --provider:physical_network opennet --provider:segmentation_id NUEVO_VLAN_ID --router:external=true

Puede haber un solo "physical_network" por interfaz. Si el servidor por ejemplo tiene dos interfaces dedicadas para las redes de neutron, entonces hay que crear:

br-eth1
br-eth2

Cada uno con sus respectivas interfaces ethX-VLAN_ID. Ejemplo:

eth1-30
eth1-50
eth2-10
eth2-20

Se crean las redes para cada caso en neutron:

neutron net-create netvlan10 --shared --provider:network_type vlan --provider:physical_network networkinteth2 --provider:segmentation_id 10 --router:external=true
neutron net-create netvlan20 --shared --provider:network_type vlan --provider:physical_network networkinteth2 --provider:segmentation_id 20 --router:external=true
neutron net-create netvlan30 --shared --provider:network_type vlan --provider:physical_network networkinteth1 --provider:segmentation_id 30 --router:external=true
neutron net-create netvlan50 --shared --provider:network_type vlan --provider:physical_network networkinteth1 --provider:segmentation_id 50 --router:external=true

Esto crea las nuevas redes netvlan10, netvlan20, netvlan30 y netvlan50, y crea las redes físicas networkinteth1 y networkinteth2

Finalmente, en el plugin ML2 las redes físicas deben ser colocadas igual que los mappings de neutron:

[ml2]
type_drivers = vlan
mechanism_drivers = openvswitch,l2population
tenant_network_types = vlan

[ml2_type_vlan]
network_vlan_ranges = networkinteth1:10:100,networkinteth2:10:100

[ovs]
enable_tunneling = False
network_vlan_ranges = networkinteth1:10:100,networkinteth2:10:100
bridge_mappings = networkinteth1:br-eth1,networkinteth2:br-eth2

Con esto se puede manejar tantas redes sea necesario con pocas interfaces, siempre y cuando las mismas estén en modo TRUNK pasando los TAGS de vlan !.
